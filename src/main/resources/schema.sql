DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS films_genres CASCADE;
DROP TABLE IF EXISTS users_friends CASCADE;
DROP TABLE IF EXISTS films_users_liked CASCADE;
DROP TABLE IF EXISTS mpa CASCADE;



CREATE TABLE IF NOT EXISTS mpa
(
    id   int PRIMARY KEY,
    name varchar(80)
);


CREATE TABLE IF NOT EXISTS films
(
    --id           int PRIMARY KEY AUTO_INCREMENT NOT NULL UNIQUE,
    --id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    --id int generated by default as identity primary key,
    --id           int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    -- id           int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id           int AUTO_INCREMENT PRIMARY KEY NOT NULL,
    name         varchar(80)                    NOT NULL,
    description  varchar(200)                   NOT NULL,
    release_date date                           NOT NULL,
    duration     int                            NOT NULL,
    rate         double,
    mpa_id       int,
    FOREIGN KEY (mpa_id) REFERENCES mpa (id)
);



CREATE TABLE IF NOT EXISTS genres
(
    id   int PRIMARY KEY,
    name varchar(20)
);

CREATE TABLE IF NOT EXISTS films_genres
(
    id       int NOT NULL,
    genre_id int,
    FOREIGN KEY (genre_id) REFERENCES genres (id),
    FOREIGN KEY (id) REFERENCES films (id),
    UNIQUE (id, genre_id)
);

CREATE TABLE IF NOT EXISTS users
(
    id       int                NOT NULL PRIMARY KEY AUTO_INCREMENT,
    email    varchar(80)        NOT NULL UNIQUE,
    login    varchar(80) UNIQUE NOT NULL,
    name     varchar(80)        NOT NULL,
    birthday date               NOT NULL
);

CREATE TABLE IF NOT EXISTS users_friends
(
    id        int NOT NULL,
    friend_id int NOT NULL,
    UNIQUE (id, friend_id),
    FOREIGN KEY (id) REFERENCES users (id),
    FOREIGN KEY (friend_id) REFERENCES users (id)
);


CREATE TABLE IF NOT EXISTS films_users_liked
(
    id      int NOT NULL,
    user_id int,
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (id) REFERENCES films (id),
    UNIQUE (id, user_id)
);

-- DELETE
-- FROM films;
-- DELETE
-- FROM films_genres;
-- DELETE
-- FROM users_friends;
-- DELETE
-- FROM films;
-- DELETE
-- FROM users;
-- ALTER TABLE films
--     ALTER COLUMN id RESTART WITH 1;
-- ALTER TABLE users
--     ALTER COLUMN id RESTART WITH 1;
